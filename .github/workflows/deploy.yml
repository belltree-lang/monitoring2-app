- name: Deploy to Apps Script via API
  run: |
    node <<'JS'
    const fs = require('fs');
    const {google} = require('googleapis');

    const creds = JSON.parse(fs.readFileSync(process.env.HOME + '/creds.json', 'utf8'));
    const scopes = [
      'https://www.googleapis.com/auth/script.projects',
      'https://www.googleapis.com/auth/script.deployments',
      'https://www.googleapis.com/auth/script.webapp.deploy'
    ];
    const auth = new google.auth.JWT(
      creds.client_email,
      null,
      creds.private_key,
      scopes
    );

    const script = google.script({version: 'v1', auth});
    const SCRIPT_ID = process.env.SCRIPT_ID;

    const walk = (dir) =>
      fs.readdirSync(dir).flatMap(file => {
        const path = `${dir}/${file}`;
        if (fs.statSync(path).isDirectory()) return walk(path);
        return {path, name: file};
      });

    // 重複防止: ファイル名は拡張子を除いたベース名に統一
    const files = walk('.').filter(f =>
      /\.(gs|js|ts|html|json)$/.test(f.name) &&
      f.name !== 'package.json'
    ).map(f => {
      const baseName = f.name.replace(/\.(gs|js|ts|html|json)$/, '');
      return {
        name: baseName,
        type: f.name.endsWith('.html') ? 'HTML'
             : f.name.endsWith('.json') ? 'JSON'
             : 'SERVER_JS',
        source: fs.readFileSync(f.path, 'utf8')
      };
    });

    (async () => {
      try {
        await script.projects.updateContent({
          scriptId: SCRIPT_ID,
          requestBody: {files}
        });
        console.log('✅ Deployed to Google Apps Script');
      } catch (err) {
        console.error('❌ Deployment failed:', err.response?.data || err.message);
        process.exit(1);
      }
    })();
    JS
  env:
    SCRIPT_ID: ${{ secrets.SCRIPT_ID }}
