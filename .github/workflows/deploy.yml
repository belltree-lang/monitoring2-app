name: Deploy to Google Apps Script

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install tools
        run: |
          npm install -g @google/clasp
          # SA からアクセストークンを発行するため
          npm install google-auth-library@9

      # CLASP_CREDENTIALS を Base64 で保存している前提
      - name: Setup clasp auth (handles service account or tokens.default)
        env:
          CLASP_CREDENTIALS: ${{ secrets.CLASP_CREDENTIALS }}
        run: |
          set -e
          echo "$CLASP_CREDENTIALS" | base64 -d > $HOME/_creds.json
          node - <<'JS'
          const fs = require('fs');
          const path = require('path');
          const {JWT} = require('google-auth-library');

          const srcPath = path.join(process.env.HOME, '_creds.json');
          const raw = fs.readFileSync(srcPath, 'utf8');
          let src;
          try { src = JSON.parse(raw); } catch (e) {
            console.error('CLASP_CREDENTIALS is not valid JSON'); process.exit(1);
          }

          // 出力先（clasp が読む）
          const dest = path.join(process.env.HOME, '.clasprc.json');

          // 1) 既存の tokens.default 形式だったら、そのまま .clasprc.json へ正規化
          if (src.tokens && src.tokens.default) {
            const d = src.tokens.default;
            const out = {
              token: {
                access_token: d.access_token || '',
                refresh_token: d.refresh_token || '',
                scope: d.scope || [
                  'https://www.googleapis.com/auth/script.projects',
                  'https://www.googleapis.com/auth/script.deployments',
                  'https://www.googleapis.com/auth/script.webapp.deploy'
                ].join(' '),
                token_type: 'Bearer',
                expiry_date: Date.now() + 3600 * 1000
              },
              oauth2ClientSettings: {
                clientId: d.client_id || '',
                clientSecret: d.client_secret || '',
                redirectUri: 'http://localhost'
              },
              isLocalCreds: true
            };
            fs.writeFileSync(dest, JSON.stringify(out));
            console.log('Wrote ~/.clasprc.json from tokens.default');
            process.exit(0);
          }

          // 2) サービスアカウント JSON の場合は、ここでアクセストークンを発行して .clasprc.json を作る
          if (src.type === 'service_account' && src.client_email && src.private_key) {
            const scopes = [
              'https://www.googleapis.com/auth/script.projects',
              'https://www.googleapis.com/auth/script.deployments',
              'https://www.googleapis.com/auth/script.webapp.deploy'
            ];
            const client = new JWT({
              email: src.client_email,
              key: src.private_key,
              scopes
            });

            (async () => {
              const {token} = await client.getAccessToken();
              if (!token) { console.error('Failed to mint access token'); process.exit(1); }
              const out = {
                token: {
                  access_token: token,
                  // refresh_token は不要（SA は都度発行でOK）
                  refresh_token: '',
                  scope: scopes.join(' '),
                  token_type: 'Bearer',
                  // だいたい1時間有効
                  expiry_date: Date.now() + 3500 * 1000
                },
                // 値は空でOK。clasp が存在だけ見ている。
                oauth2ClientSettings: {
                  clientId: '',
                  clientSecret: '',
                  redirectUri: 'http://localhost'
                },
                isLocalCreds: true
              };
              fs.writeFileSync(dest, JSON.stringify(out));
              console.log('Wrote ~/.clasprc.json from service account');
            })().catch(e => { console.error(e); process.exit(1); });
          } else {
            console.error('Unsupported CLASP_CREDENTIALS format');
            process.exit(1);
          }
          JS
          echo "=== ~/.clasprc.json ==="
          cat $HOME/.clasprc.json

      - name: Push to Google Apps Script
        run: clasp push -f
