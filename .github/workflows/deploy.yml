name: Deploy to Google Apps Script

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: |
          npm install googleapis@105

      # サービスアカウントJSONをBase64でSecretsに保存してある想定
      - name: Decode service account credentials
        env:
          CLASP_CREDENTIALS: ${{ secrets.CLASP_CREDENTIALS }}
        run: |
          echo "$CLASP_CREDENTIALS" | base64 -d > $HOME/creds.json

      - name: Deploy to Apps Script via API
        run: |
          node <<'JS'
          const fs = require('fs');
          const {google} = require('googleapis');

          // 認証
          const creds = JSON.parse(fs.readFileSync(process.env.HOME + '/creds.json', 'utf8'));
          const scopes = [
            'https://www.googleapis.com/auth/script.projects',
            'https://www.googleapis.com/auth/script.deployments',
            'https://www.googleapis.com/auth/script.webapp.deploy'
          ];
          const auth = new google.auth.JWT(
            creds.client_email,
            null,
            creds.private_key,
            scopes
          );
          const script = google.script({version: 'v1', auth});
          const SCRIPT_ID = process.env.SCRIPT_ID;

          // ファイル探索（対象拡張子のみ、不要ディレクトリ除外）
          const walk = (dir) =>
            fs.readdirSync(dir).flatMap(file => {
              const path = `${dir}/${file}`;
              if (fs.statSync(path).isDirectory()) return walk(path);
              return {path, name: file};
            });

          const allowedExts = /\.(gs|js|ts|html|json)$/;

          const files = walk('.')
            .filter(f =>
              allowedExts.test(f.name) &&
              !f.path.includes('.github') &&
              !f.path.includes('node_modules') &&
              !['package.json', 'package-lock.json', 'README.md'].includes(f.name)
            )
            .map(f => {
              const baseName = f.name.replace(/\.(gs|js|ts|html|json)$/, '');
              return {
                name: baseName,
                type: f.name.endsWith('.html') ? 'HTML'
                     : f.name.endsWith('.json') ? 'JSON'
                     : 'SERVER_JS',
                source: fs.readFileSync(f.path, 'utf8')
              };
            });

          (async () => {
            try {
              await script.projects.updateContent({
                scriptId: SCRIPT_ID,
                requestBody: {files}
              });
              console.log('✅ Deployed to Google Apps Script');
            } catch (err) {
              console.error('❌ Deployment failed:', err.response?.data || err.message);
              process.exit(1);
            }
          })();
          JS
        env:
          SCRIPT_ID: ${{ secrets.SCRIPT_ID }}
